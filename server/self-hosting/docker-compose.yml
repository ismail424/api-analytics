services:
  db:
    image: postgres:17
    container_name: db
    restart: always
    user: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    expose:
      - 5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    container_name: api
    build:
      context: ../api
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      POSTGRES_URL: postgres://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  logger:
    container_name: logger
    build:
      context: ../logger
      dockerfile: Dockerfile
    ports:
      - "8069:8000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      POSTGRES_URL: postgres://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  monitor:
    container_name: monitor
    build:
      context: ../monitor
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
    environment:
      POSTGRES_URL: postgres://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    command: /bin/bash -c "printenv > /etc/environment && tail -f /dev/null"

volumes:
  db-data:
